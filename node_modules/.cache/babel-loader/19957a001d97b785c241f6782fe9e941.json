{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrsar\\\\browser-ml-inference\\\\src\\\\App.js\";\nimport './App.css';\nimport React from 'react';\nimport { inference } from './inference.js';\nimport { columnNames } from './inference.js';\nimport { modelDownloadInProgress } from './inference.js';\nimport Chart from \"react-google-charts\";\nimport Box from '@mui/material/Box';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TextInputArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: 'Enter text to classify emotion, model trained on English text.',\n      data: columnNames,\n      latency: 0.0,\n      downloading: modelDownloadInProgress()\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.checkModelStatus(), 1000);\n  }\n\n  checkModelStatus() {\n    this.setState({\n      downloading: modelDownloadInProgress()\n    });\n\n    if (!this.state.downloading) {\n      this.timerID = setInterval(() => this.checkModelStatus, 5000000);\n    }\n  }\n\n  handleChange(event) {\n    inference(event.target.value).then(result => {\n      this.setState({\n        text: event.target.value,\n        data: result[1],\n        latency: result[0]\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"em\", {\n          children: \"In-Browser Transformer Inference\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          width: '400px',\n          height: '200px',\n          chartType: \"BarChart\",\n          data: this.state.data,\n          options: {\n            chartArea: {\n              width: '40%'\n            },\n            colors: ['purple'],\n            backgroundColor: '#282c34',\n            legend: {\n              textStyle: {\n                color: 'white',\n                fontSize: 10\n              },\n              labels: {\n                fontColor: 'white'\n              }\n            },\n            vAxis: {\n              textStyle: {\n                color: 'white',\n                fontSize: 13\n              }\n            },\n            hAxis: {\n              minValue: 5,\n              maxValue: 50,\n              textStyle: {\n                color: 'white'\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }, this), this.state.downloading && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"2\",\n            children: \"Downloading model from CDN to browser..\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              width: '400px'\n            },\n            children: /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"8\",\n          cols: \"24\",\n          className: \"App-textarea\",\n          name: \"message\",\n          placeholder: this.state.text,\n          autoFocus: true,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"3\",\n            children: [\"Inference Latency \", this.state.latency, \" ms\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"3\",\n            children: [\"GitHub Repo: \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://github.com/jobergum/browser-ml-inference\",\n              children: \"browser-ml-inference\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 40\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"font\", {\n            size: \"3\",\n            children: [\"Model was trained on the \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\",\n              children: \"GoEmotions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 52\n            }, this), \" dataset.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default TextInputArea;","map":{"version":3,"names":["React","inference","columnNames","modelDownloadInProgress","Chart","Box","LinearProgress","TextInputArea","Component","constructor","props","state","text","data","latency","downloading","handleChange","bind","componentDidMount","timerID","setInterval","checkModelStatus","setState","event","target","value","then","result","render","chartArea","width","colors","backgroundColor","legend","textStyle","color","fontSize","labels","fontColor","vAxis","hAxis","minValue","maxValue"],"sources":["C:/Users/mrsar/browser-ml-inference/src/App.js"],"sourcesContent":["import './App.css';\r\n\r\nimport React from 'react';\r\nimport {inference} from './inference.js';\r\nimport {columnNames} from './inference.js';\r\nimport {modelDownloadInProgress} from './inference.js';\r\nimport Chart from \"react-google-charts\";\r\nimport Box from '@mui/material/Box';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\nclass TextInputArea extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: 'Enter text to classify emotion, model trained on English text.',\r\n      data:columnNames,\r\n      latency:0.0,\r\n      downloading:modelDownloadInProgress()\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(\r\n      () => this.checkModelStatus(),\r\n      1000\r\n    );\r\n  }\r\n\r\n  checkModelStatus() {\r\n    this.setState({\r\n      downloading: modelDownloadInProgress(),\r\n    });\r\n    if (!this.state.downloading) {\r\n      this.timerID = setInterval(\r\n        () => this.checkModelStatus,\r\n        5000000\r\n      );\r\n    }\r\n  }\r\n\r\n  handleChange(event) {  \r\n    inference(event.target.value).then( result => {\r\n      this.setState({\r\n        text : event.target.value,\r\n        data:result[1],\r\n        latency:result[0],\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <header className=\"App-header\">   \r\n      <em>In-Browser Transformer Inference</em>\r\n      <Chart  \r\n        width={'400px'}\r\n        height={'200px'}\r\n        chartType=\"BarChart\"\r\n        data={this.state.data}\r\n        options={{\r\n          chartArea: { width: '40%'},\r\n          colors: ['purple'],\r\n          backgroundColor: '#282c34',\r\n          legend: { \r\n            textStyle: {color: 'white', fontSize: 10},\r\n            labels: {fontColor:'white'}\r\n          },\r\n          vAxis: {\r\n            textStyle: {\r\n            color: 'white',\r\n            fontSize: 13\r\n          }\r\n          },\r\n          hAxis: {\r\n            minValue: 5,\r\n            maxValue: 50,\r\n            textStyle: {\r\n              color: 'white'\r\n            }\r\n          }\r\n      }}\r\n      />  \r\n      \r\n      {this.state.downloading && \r\n        <div><font size=\"2\">Downloading model from CDN to browser..</font>\r\n        <Box sx={{ width: '400px' }}>\r\n        <LinearProgress />\r\n        </Box> \r\n        <p></p>\r\n        </div>\r\n      }\r\n      <textarea rows=\"8\" cols=\"24\" className=\"App-textarea\" name=\"message\" \r\n       placeholder={this.state.text} autoFocus onChange={this.handleChange}>\r\n      </textarea>\r\n       <div><font size=\"3\">Inference Latency {this.state.latency} ms</font></div>\r\n      <div><font size=\"3\">GitHub Repo: <a href=\"https://github.com/jobergum/browser-ml-inference\">browser-ml-inference</a></font></div>\r\n      <div><font size=\"3\">Model was trained on the <a href=\"https://ai.googleblog.com/2021/10/goemotions-dataset-for-fine-grained.html\">GoEmotions</a> dataset.</font></div>\r\n      </header>\r\n    </div>   \r\n    );\r\n  }\r\n}\r\nexport default TextInputArea;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}